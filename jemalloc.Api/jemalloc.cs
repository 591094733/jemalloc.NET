// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace jemalloc
{
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void JeMallocMessagePtr(global::System.IntPtr _0, [MarshalAs(UnmanagedType.LPStr)] string _1);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate global::System.IntPtr ExtentAllocT(global::System.IntPtr _0, global::System.IntPtr _1, ulong _2, ulong _3, bool* _4, bool* _5, uint _6);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    [return: MarshalAs(UnmanagedType.I1)]
    public unsafe delegate bool ExtentDallocT(global::System.IntPtr _0, global::System.IntPtr _1, ulong _2, [MarshalAs(UnmanagedType.I1)] bool _3, uint _4);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void ExtentDestroyT(global::System.IntPtr _0, global::System.IntPtr _1, ulong _2, [MarshalAs(UnmanagedType.I1)] bool _3, uint _4);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    [return: MarshalAs(UnmanagedType.I1)]
    public unsafe delegate bool ExtentCommitT(global::System.IntPtr _0, global::System.IntPtr _1, ulong _2, ulong _3, ulong _4, uint _5);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    [return: MarshalAs(UnmanagedType.I1)]
    public unsafe delegate bool ExtentDecommitT(global::System.IntPtr _0, global::System.IntPtr _1, ulong _2, ulong _3, ulong _4, uint _5);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    [return: MarshalAs(UnmanagedType.I1)]
    public unsafe delegate bool ExtentPurgeT(global::System.IntPtr _0, global::System.IntPtr _1, ulong _2, ulong _3, ulong _4, uint _5);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    [return: MarshalAs(UnmanagedType.I1)]
    public unsafe delegate bool ExtentSplitT(global::System.IntPtr _0, global::System.IntPtr _1, ulong _2, ulong _3, ulong _4, [MarshalAs(UnmanagedType.I1)] bool _5, uint _6);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    [return: MarshalAs(UnmanagedType.I1)]
    public unsafe delegate bool ExtentMergeT(global::System.IntPtr _0, global::System.IntPtr _1, ulong _2, global::System.IntPtr _3, ulong _4, [MarshalAs(UnmanagedType.I1)] bool _5, uint _6);

    public unsafe partial class ExtentHooks : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 72)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr alloc;

            [FieldOffset(8)]
            internal global::System.IntPtr dalloc;

            [FieldOffset(16)]
            internal global::System.IntPtr destroy;

            [FieldOffset(24)]
            internal global::System.IntPtr commit;

            [FieldOffset(32)]
            internal global::System.IntPtr decommit;

            [FieldOffset(40)]
            internal global::System.IntPtr purge_lazy;

            [FieldOffset(48)]
            internal global::System.IntPtr purge_forced;

            [FieldOffset(56)]
            internal global::System.IntPtr split;

            [FieldOffset(64)]
            internal global::System.IntPtr merge;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("jemalloc", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0extent_hooks_s@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::jemalloc.ExtentHooks> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::jemalloc.ExtentHooks>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::jemalloc.ExtentHooks __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::jemalloc.ExtentHooks(native.ToPointer(), skipVTables);
        }

        internal static global::jemalloc.ExtentHooks __CreateInstance(global::jemalloc.ExtentHooks.__Internal native, bool skipVTables = false)
        {
            return new global::jemalloc.ExtentHooks(native, skipVTables);
        }

        private static void* __CopyValue(global::jemalloc.ExtentHooks.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::jemalloc.ExtentHooks.__Internal));
            *(global::jemalloc.ExtentHooks.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ExtentHooks(global::jemalloc.ExtentHooks.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ExtentHooks(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ExtentHooks()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::jemalloc.ExtentHooks.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ExtentHooks(global::jemalloc.ExtentHooks _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::jemalloc.ExtentHooks.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::jemalloc.ExtentHooks.__Internal*) __Instance) = *((global::jemalloc.ExtentHooks.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::jemalloc.ExtentHooks __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }

    public unsafe partial class Je
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("jemallocd", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="je_malloc")]
            internal static extern global::System.IntPtr JeMalloc(ulong size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("jemallocd", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="je_calloc")]
            internal static extern global::System.IntPtr JeCalloc(ulong num, ulong size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("jemallocd", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="je_posix_memalign")]
            internal static extern int JePosixMemalign(void** memptr, ulong alignment, ulong size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("jemallocd", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="je_aligned_alloc")]
            internal static extern global::System.IntPtr JeAlignedAlloc(ulong alignment, ulong size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("jemallocd", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="je_realloc")]
            internal static extern global::System.IntPtr JeRealloc(global::System.IntPtr ptr, ulong size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("jemallocd", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="je_free")]
            internal static extern void JeFree(global::System.IntPtr ptr);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("jemallocd", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="je_mallocx")]
            internal static extern global::System.IntPtr JeMallocx(ulong size, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("jemallocd", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="je_rallocx")]
            internal static extern global::System.IntPtr JeRallocx(global::System.IntPtr ptr, ulong size, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("jemallocd", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="je_xallocx")]
            internal static extern ulong JeXallocx(global::System.IntPtr ptr, ulong size, ulong extra, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("jemallocd", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="je_sallocx")]
            internal static extern ulong JeSallocx(global::System.IntPtr ptr, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("jemallocd", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="je_dallocx")]
            internal static extern void JeDallocx(global::System.IntPtr ptr, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("jemallocd", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="je_sdallocx")]
            internal static extern void JeSdallocx(global::System.IntPtr ptr, ulong size, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("jemallocd", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="je_nallocx")]
            internal static extern ulong JeNallocx(ulong size, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("jemallocd", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="je_mallctl")]
            internal static extern int JeMallctl([MarshalAs(UnmanagedType.LPStr)] string name, global::System.IntPtr oldp, ulong* oldlenp, global::System.IntPtr newp, ulong newlen);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("jemallocd", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="je_mallctlnametomib")]
            internal static extern int JeMallctlnametomib([MarshalAs(UnmanagedType.LPStr)] string name, ulong* mibp, ulong* miblenp);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("jemallocd", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="je_mallctlbymib")]
            internal static extern int JeMallctlbymib(ulong* mib, ulong miblen, global::System.IntPtr oldp, ulong* oldlenp, global::System.IntPtr newp, ulong newlen);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("jemallocd", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="je_malloc_stats_print")]
            internal static extern void JeMallocStatsPrint(global::System.IntPtr write_cb, global::System.IntPtr je_cbopaque, [MarshalAs(UnmanagedType.LPStr)] string opts);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("jemallocd", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="je_malloc_usable_size")]
            internal static extern ulong JeMallocUsableSize(global::System.IntPtr ptr);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("jemallocd", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl, 
                EntryPoint = "je_set_malloc_conf", CharSet = CharSet.Ansi)]
            internal static extern void JeSetMallocConf(IntPtr ptr);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("jemallocd", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl, 
                EntryPoint = "je_get_malloc_conf", CharSet = CharSet.Ansi)]
            internal static extern IntPtr JeGetMallocConf();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("jemallocd", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl, EntryPoint = "je_get_malloc_message_ptr")]
            internal static extern global::System.IntPtr JeGetMallocMessagePtr();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("jemallocd", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl, EntryPoint = "je_set_malloc_message_ptr")]
            internal static extern void JeSetMallocMessagePtr(global::System.IntPtr p);
        }

        public static global::System.IntPtr Malloc(ulong size)
        {
            var __ret = __Internal.JeMalloc(size);
            return __ret;
        }

        public static global::System.IntPtr Calloc(ulong num, ulong size)
        {
            var __ret = __Internal.JeCalloc(num, size);
            return __ret;
        }

        public static int PosixMemalign(void** memptr, ulong alignment, ulong size)
        {
            var __ret = __Internal.JePosixMemalign(memptr, alignment, size);
            return __ret;
        }

        public static global::System.IntPtr AlignedAlloc(ulong alignment, ulong size)
        {
            var __ret = __Internal.JeAlignedAlloc(alignment, size);
            return __ret;
        }

        public static global::System.IntPtr Realloc(global::System.IntPtr ptr, ulong size)
        {
            var __ret = __Internal.JeRealloc(ptr, size);
            return __ret;
        }

        public static void Free(global::System.IntPtr ptr)
        {
            __Internal.JeFree(ptr);
        }

        public static global::System.IntPtr Mallocx(ulong size, int flags)
        {
            var __ret = __Internal.JeMallocx(size, flags);
            return __ret;
        }

        public static global::System.IntPtr Rallocx(global::System.IntPtr ptr, ulong size, int flags)
        {
            var __ret = __Internal.JeRallocx(ptr, size, flags);
            return __ret;
        }

        public static ulong Xallocx(global::System.IntPtr ptr, ulong size, ulong extra, int flags)
        {
            var __ret = __Internal.JeXallocx(ptr, size, extra, flags);
            return __ret;
        }

        public static ulong Sallocx(global::System.IntPtr ptr, int flags)
        {
            var __ret = __Internal.JeSallocx(ptr, flags);
            return __ret;
        }

        public static void Dallocx(global::System.IntPtr ptr, int flags)
        {
            __Internal.JeDallocx(ptr, flags);
        }

        public static void Sdallocx(global::System.IntPtr ptr, ulong size, int flags)
        {
            __Internal.JeSdallocx(ptr, size, flags);
        }

        public static ulong Nallocx(ulong size, int flags)
        {
            var __ret = __Internal.JeNallocx(size, flags);
            return __ret;
        }

        public static int Mallctl(string name, global::System.IntPtr oldp, ref ulong oldlenp, global::System.IntPtr newp, ulong newlen)
        {
            fixed (ulong* __refParamPtr2 = &oldlenp)
            {
                var __arg2 = __refParamPtr2;
                var __ret = __Internal.JeMallctl(name, oldp, __arg2, newp, newlen);
                return __ret;
            }
        }

        public static int Mallctlnametomib(string name, ref ulong mibp, ref ulong miblenp)
        {
            fixed (ulong* __refParamPtr1 = &mibp)
            {
                var __arg1 = __refParamPtr1;
                fixed (ulong* __refParamPtr2 = &miblenp)
                {
                    var __arg2 = __refParamPtr2;
                    var __ret = __Internal.JeMallctlnametomib(name, __arg1, __arg2);
                    return __ret;
                }
            }
        }

        public static int Mallctlbymib(ref ulong mib, ulong miblen, global::System.IntPtr oldp, ref ulong oldlenp, global::System.IntPtr newp, ulong newlen)
        {
            fixed (ulong* __refParamPtr0 = &mib)
            {
                var __arg0 = __refParamPtr0;
                fixed (ulong* __refParamPtr3 = &oldlenp)
                {
                    var __arg3 = __refParamPtr3;
                    var __ret = __Internal.JeMallctlbymib(__arg0, miblen, oldp, __arg3, newp, newlen);
                    return __ret;
                }
            }
        }

        public static void MallocStatsPrint(global::jemalloc.Delegates.Action_IntPtr_string write_cb, global::System.IntPtr je_cbopaque, string opts)
        {
            var __arg0 = write_cb == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(write_cb);
            __Internal.JeMallocStatsPrint(__arg0, je_cbopaque, opts);
        }

        public static ulong MallocUsableSize(global::System.IntPtr ptr)
        {
            var __ret = __Internal.JeMallocUsableSize(ptr);
            return __ret;
        }

        public static string MallocConf
        {
            get
            {
                return Marshal.PtrToStringAnsi(__Internal.JeGetMallocConf());
            }
            set
            {
                __Internal.JeSetMallocConf(Marshal.StringToHGlobalAnsi(value));
            }
        }

        
        public static global::jemalloc.JeMallocMessagePtr MallocMessage
        {
            get
            {
                var __ret = __Internal.JeGetMallocMessagePtr();
                var __ptr0 = __ret;
                return __ptr0 == IntPtr.Zero ? null : (global::jemalloc.JeMallocMessagePtr)Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::jemalloc.JeMallocMessagePtr));
            }

            set
            {
                IntPtr __ptr = __Internal.JeGetMallocMessagePtr();
                __ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }
        
        public static int MallCtl(string name)
        {
            IntPtr retp = Marshal.AllocHGlobal(sizeof(int));
            ulong size = sizeof(int);
            Mallctl("opt.narenas", retp, ref size, IntPtr.Zero, 0);
            int ret = Marshal.ReadInt32(retp);
            Marshal.FreeHGlobal(retp);
            return ret;   
        }
    }

    
    namespace Delegates
    {
        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate void Action_IntPtr_string(global::System.IntPtr _0, [MarshalAs(UnmanagedType.LPStr)] string _1);
    }
    
}
